# Author
translation:
  source: "Muklis Dwi - https://github.com/m-klis"
  text_direction: "ltr" # Set to "rtl" for right-to-left languages

# Navigation
nav:
  episodes: "Episode"
  about: "Tentang"
  ep1: "Kenapa kita butuh HTTPS?"
  ep2: "Kunci kunci"
  ep3: "Jabat tangan"
  ep4: "Perbedaan HTTPS, SSL, TLS"
  ep5: "Sertifikat Otoritas"
  social: "Menjadi seorang social cat"
  more_comics: "Baca lebih banyak komik"
  continue_reading: "Lanjutkan membaca"

# Home page
home:
  title: "Bagaimana HTTPS Bekerja"
  certificat_cta: "Mulai membaca"
  subtitle: "Bagaimana HTTPS bekerja ...dalam bentuk sebuah komik!"
  p1: "Pernahkah kamu bertanya-tanya kenapa sebuah ikon kunci hijau muncul pada bar URL browser kamu? Dan kenapa itu sangat penting? Kami merasakan itu juga, dan komik ini ada untuk kamu!"
  p2: "Ikuti petualangan dari Certificat, Browserbird, dan Compugter bagaimana mereka menjelaskan kenapa HTTPS sangat krusial bagi masa depan dari sebuah web dan bagaimana itu semua dapat bekerja bersama."
  p3: "Jangan biarkan sang crabs jahat mendapatkan kamu (kamu akan tahu apa yang kami maksud di dalam komik). Ayo cari tahu tentang HTTPS dan kenapa itu sangat penting bagi privasi kamu."
  small_cta: "Mulai membaca sekarang"

# Episode fragments for /episodes
fragment:
  ep1: "Mulai membaca disini. Jika hanya ada satu hal yang ingin kamu ambil dari komik ini, jadikan hal itu adalah yang satu ini."
  ep2: "Untuk mengerti bagaimana HTTPS bekerja, kamu harus mengetahui bagaimana kunci enkripsi simetris dan asimetris bekerja. Itu terdengar seperti kata-kata yang besar, tapi percayalah sungguh tidak seperti itu."
  ep3: "Ketika kamu menelusuri pada sebuah situs HTTP yang aman, browser kamu dan server yang terhubung padanya harus mempunyai sebuah jabat tangan rahasia. Kita jelaskan secara rinci dan membawanya pada dunia nyata jadi kamu bisa menyapa temanmu dengan jabat tangan rahasia."
  ep4: "Sangat mudah untuk bingung terhadap HTTPS, SSL, dan TLS. Kita sering menggunakan istilah-istilah ini bergantian. Ayo bahas tentang mereka satu persatu dengan sedikit sejarah."
  ep5: "Apa yang mereka lakukan? Kenapa kita memerlukan mereka? Bagaimana cara mereka memvalidasi sertifikat? Sangat banyak pertanyaan untuk dijawab pada bab terakhir dari komik ini!"

# Episodes
ep1:
  1: "Kenapa kita butuh HTTPS?"
  2: "Kita butuh HTTPS untuk 3 alasan."
  3: "Privasi, integritas, dan identifikasi."
  4: "Mari bicara tentang privasi lebih dulu." 
  5: "Aku akan menggunakan teman-temanku sebagai contoh."
  6: "tanpa teks"
  7: "Aku mengirim sebuah pesan kepada Browserbird."
  8: "Oh tidak! Pesan tersebut tidak di enkripsi!"
  9: "Crab mendengarkan pada komunikasi tersebut dengan menangkap pesannya."
  10: "Itu berpotensi digunakan untuk kejahatan."
  11: "Privasi berarti bahwa tidak ada seorang pun yang bisa menguping pada pesan-pesanmu."
  12: "Crab nakal. Nakal."
  13: "Ketika kamu menjelajah pada sebuah situs web tanpa HTTPS, Aku bisa mendengarkan kata sandimu."
  14: "Gembok hijau pada kotak URL di browser kamu memberi tahu kamu bahwa tidak ada crab-crab mengintip dibelakang punggungmu."
  15: "Alasan nomor 2: integritas."
  16: "Contoh akan datang!"
  17: "Aku mengirim pesan lain kepada Browserbird tidak di enkripsi."
  18: "Tetapi sebelum itu mencapai Browserbird, Aku mecegat pesan tersebut."
  19: "Aku merubah pesan itu agar mengatakan sesuatu yang buruk tentang Browserbird dan melanjutkan itu kepadanya."
  20: "Kenapa Compugter mengatakan sesuatu seperti ini tentangku ?"
  21: "tanpa teks"
  22: "Ini sering disebut sebagai serangan man-in-the-middle."
  23: "Dan serangan-serangan crab-in-the-middle lebih buruk."
  24: "Crab Nakal. Nakal."
  25: "Integritas berarti bahwa pesan tersebut tidak akan di manipulasi dalam perjalan menuju tujuannya."
  26: "Aku memastikan bahwa komunikasi mu tidak menjadi rusak."
  27: "Alasan nomor 3: identifikasi."
  28: "Waktunya contoh!"
  29: "Identifikasi berarti bahwa Aku bisa melakukan cek bahwa pesan ini datang dari Compugter."
  30: "Sebuah tanda tangan digital yang tertanam pada sebuah pesan bisa di identifikasi pengirimnya."
  31: "Tanda tangan digital bukan kalimat penutup pada email kamu. Siapapun bisa menyalin itu ;)"
  32: "Dan ketika kamu menjelajah di internet, identifikasi berarti bahwa situs yang kamu kunjungi memang seperti yang kamu pikirkan."
  33: "HTTPS, melalui sertifikat SSL, memastikan kamu telah terhubung secara tepat dengan penerima yang kamu inginkan."
  34: "Sertifikat SSL ini sah dan telah disetujui oleh sebuah Otoritas Sertifikat yang sah. Kamu siap untuk melanjutkan."
  35: "Kita akan membicarakan lebih banyak tentang sertifikat SSL dan Otoritas Sertifikat segera, jadi tetap ikuti."
  36: "Dalam ringkasan, privasi, integritas dan identifikas adalah alasan utama kenapa HTTPS itu sangat penting."
  next: "Selanjutnya di HowHTTPS.works..."
  next_teaser: "Sekarang kita tahu mengapa, langkah selanjutnya adalah mengerti enkripsi simetris dan asimetris. Kata-kata yang sukar, tapi mudah konsepnya."

ep2:
  1: "The Keys"
  2: "HTTPS needs a way to provide privacy, integrity, and identification on the web."
  3: "And that mechanism is called 'encryption'."
  4-1: "Let's talk about the two types of encryption algorithms."
  4-2: "Now, where did I put those keys?"
  5-1: "Finally!"
  5-2: "Let's start with the symmetric key algorithm."
  6: "In this scenario, there is only one key to encrypt and decrypt a message."
  7: "Before sending a message to BrowserBird, I encrypt the message with a key."
  8: "You can think of the encryption process like putting the message in a box and locking the box with a key."
  9: "Only the person that has a copy of the key can open the box and read the message."
  10: "This guarantees that the box cannot be opened until it reaches the person with the right key."
  11: "When Browserbird gets the box, they use their key to open it and read the message."
  12: "It's important that the key is kept private. You should not share the key in plain text, or send it with the box. Or keep it in your pocket."
  13: "Remember, anyone with the key can open the box."
  14-1: "Using the box is a nice visual to understand encryption, but it's really oversimplifying it."
  14-2: "Let's fix that!"
  15: "In reality, anyone looking at the message without the key only sees nonsense text."
  16: "This text was generated by an encryption algorithm."
  17: "Which is a fancy way to say that the text was scrambled through a series of steps."
  18: "It was transformed and spread out multiple times. Each time obfuscating the message further."
  19: "To decrypt a message, we just need to apply the same steps, but in reverse order."
  20: "The encryption key is mixed in with the message, so even if you know the encryption algorithm, without the key, the message is still nonsense."
  21: "Here is what a key might look like."
  22: "One main issue with symmetric keys is that they are hard to share."
  23: "You have to be super careful with how you distribute the key."
  24: "This brings us to asymmetric keys."
  25: "The main difference with symmetric keys, is that you have 2 keys."
  26: "One key is public, the other one is private. They are paired and work together."
  27-1: "Share your public key with anyone. Send it in plain text, make stickers, tattoos. Anything you want! It's public!"
  27-2: "I like tattoos."
  28: "Compugter is sending their public key to BrowserBird."
  29: "And now I am sending a message back to them encrypting it with their public key."
  30: "In other words, BrowserBird puts the message in a box and locks it with Compugter's public key."
  31: "I can now use my private key to read the message."
  32: "That's the main idea. Only the private key can open a box locked with the public key pair."
  33: "I use Browserbird public key to send them another message."
  34: "This is great not only for privacy, but also for identification since we know for sure that only the owner of the 2 keys can open the message."
  35: "Next, we'll be looking at how symmetric and asymmetric keys play a role when we connect to a site with SSL."
  next: "Next on HowHTTPS.works..."
  next_teaser: "Hurray for encryption! What's next? Learn the secret handshake between your browser and the internet that makes your information safe and secured."

ep3:
  1: "The Handshake"
  2: "When you started reading this comic, your browser displayed a green lock on the address bar."
  3: "How did that happen?"
  4: "Your browser communicated with our server, where this comic is hosted, and they both established a secure connection to transmit messages."
  5: "But first, they needed to agree on how to communicate securely."
  6: "If the negotiation is not successful, your browser lets you know by showing an error or warning."
  7: "If an agreement is reached, your browser is happy to display a green padlock on the address bar."
  8: "This process, the negotiation between a browser and a server, is called 'the handshake'."
  9: "It happens very fast. We are going to show you how it works."
  10: "Browserbird will be your browser."
  11: "Compugter will be our server."
  12: "Take it away guys!"
  13: "Ready? Here is what the 'handshake' in slow-motion looks like."
  14: "Left clap"
  15: "Right clap"
  16: "Vertical shaka"
  17: "Shaka horizontal rotation"
  18: "Tickles"
  19: "Done!"
  20: "Let's do it again, but faster."
  21: "Left clap - Right clap - Shaka - Shaka rotation - Tickles."
  22: "A-G-A-I-N !"
  23: "Stop!"
  24: "Let's break it down. Step by step."
  25: "Step One: Left clap. AKA Client Hello."
  26: "I send a list of SSL/TLS versions and encryption algorithms that I can work with to Compugter."
  27: "A fancy word for the encryption algorithm list is 'cipher suite'."
  28: "So you can sound like a pro at the dinner table."
  29: "The SSL and TLS protocols have evolved over time, we'll talk more about that soonish."
  30: "And then I wait for an answer from Compugter."
  31: "Step two: Right clap. AKA Server Hello."
  32: "I choose the best SSL/TLS version and encryption algorithm among the ones browserbird sent me, and based on my preferences."
  33: "I reply with my certificate, which includes my public key, so they can verify who I am."
  34: "Step three: Vertical shaka. AKA Client Key Exchange."
  35: "I check Compugter's certificate to make sure they are legit."
  36: "I generate a 'pre-master key' so we can both use it later when we generate a unique key."
  37: "I encrypt that pre-master key with Compugter's public key and then send it to him."
  38: "Step four: Shaka horizontal rotation. AKA Change Cipher spec."
  39: "I use my private key to decrypt the pre-master key."
  40: "So far all the communication between them has been in the open. They haven't secured any messages."
  41: "They used asymmetric keys (public and private keys) to encrypt the pre-master key so nobody could spy on it."
  42: "Now they both generate the same 'shared secret' that they are going to use as a symmetric key."
  43: "And browserbird sends a test."
  44: "Compugter responds."
  45: "Step five: Tickles. AKA Everything is now secured."
  46: "Now all data going back and forth between Browserbird and Compugter is now secured for the rest of the session."
  47: "Passwords, credit card details, everything."
  48: "Simple, right?"
  49: "Next time you connect to a website securely via HTTPS, give your browser the shaka because you know their secret handshake."
  next: "Next on HowHTTPS.works..."
  next_teaser: "HTTPS, SSL, TLS, oh my! I just had an acronym soup for lunch. What do they mean? Are they the same thing?"

ep4:
  1: "The differences between HTTPS, SSL, and TLS"
  2: "It's easy to confuse these terms and use them interchangeably."
  3: "Let's look into each one and see how they differ."
  4: "What's HTTPS?"
  5: "HTTPS is the secured version of HTTP: HyperText Transfer Protocol."
  6: "HTTP is the protocol used by your browser and web servers to communicate and exchange information."
  7: "When that exchange of data is encrypted with SSL/TLS, then we call it HTTPS. The 'S' stands for Secure."
  8: "OMG! Wait! Did I say SSL/TLS! Why?"
  9: "Because it's the precise way to talk about SSL and TLS."
  10: "SSL stands for 'Secure Sockets Layer'. A protocol created by Netscape."
  11: "SSL is a dinosaur by Internet standards. The first version was never released and version 2 launched with the browser Netscape 1.1 in 1995."
  12: "Later that year Netscape released version 3 because version 2 had some major security problems."
  13: "We were all happy cats until 1999. Browser wars between Netscape and Microsoft, the need for standards, and Britney Spears - '...Baby One More Time' changed the world as we know it. Fur-ever."
  14: "Oops, I did it again."
  15: "Netscape gave control of SSL protocol to the IETF: Internet Engineering Task Force."
  16: "Before 1999 ended, IETF released TLS version 1.0 (Which was really SSL 3.1)."
  17: "SSL was renamed to TLS: Transport Layer Security. Creating confusion and chaos still to this day."
  18: "Thanks 1999."
  19: "TLS 1.0 took off and version 1.1 was released in 2006."
  20: "A couple of years later, in 2008, TLS 1.2 was released to address a few flaws and exploits."
  21: "However, it's not until 2013 that browsers start to catch up and add support for TLS 1.2."
  22: "To add to the confusion, SSL 3.0 was officially deprecated in 2015."
  23-1: "TLS 1.3 was approved in march 2018 and your browser might already support it."
  23-2: "Click here to check the current TLS version for your browser."
  23-3: "But come back to finish the story."
  24: "TLS 1.3 brings great security improvements and removes old weaker features."
  25: "No worries if your browser doesn't support it yet. TLS 1.2 is still the recommended version if you are reading this in Spring/Summer 2020."
  26: "Let's recap."
  27: "HTTPS is just the HTTP protocol but with data encryption using SSL/TLS."
  28: "SSL is the original and now deprecated protocol created at Netscape in the mid 90s."
  29: "TLS is the new protocol for secured encryption on the web maintained by IETF."
  30: "And now you know the hiss-tory."
  next: "Next on HowHTTPS.works..."
  next_teaser: "Certificates and Certificate authorities: What Do They Know? Do They Know Things?? Let's Find Out!"

ep5:
  1: "Certificate Authorities"
  2: "A certificate authority (CA) is a third-party organization with 3 main objectives:"
  3: "1. Issuing certificates."
  4: "2. Confirming the identity of the certificate owner."
  5: "3. Providing proof that the certificate is valid."
  6: "You might have heard of Symantec, Comodo, or Let's Encrypt, among others."
  7: "Becoming a CA is an intense task of security requirements and audits."
  8: "You need to be trusted to be accepted into a root store."
  9: "A root store is basically a database of trusted CAs."
  10: "Apple, Windows, and Mozilla run their own root stores that they pre-install in your computer or device."
  11: "Which certificate should you buy? You have basically 3 flavors."
  12: "Domain validated. The certificate just verifies the domain name, and nothing else. You probably need this one."
  13: "Organization validated. The certificate requires the validation and manual verification of the organization behind the certificate."
  14: "Extended validation. The certificate requires an exhaustive verification of the business."
  15: "All valid certificates result in the browser displaying a secure badge in the browser bar. EV certificates generally display the company name as well."
  16: "But how do certificates get validated?"
  17: "When a CA issues a certificate, they sign the certificate with their root certificate pre-installed in the root store."
  18: "Most of the time it's an intermediate certificate signed with a root certificate."
  19: "If a cat-astrophy would occur and the root certificate is compromised, it's easier to revoke the intermediate certificates, since the root certificates are installed on each device."
  20: "Let's walk through how a certificate is validated. The process is based on a 'chain of trust'."
  21: "Your browser connects to a site via HTTPS and downloads the certificate."
  22: "The certificate is not a root certificate."
  23: "Your browser downloads the certificate that was used to sign the certificate on the site."
  24: "But this certificate is still not the root certificate."
  25: "Your browser once more looks up the certificate that signed the intermediate certificate."
  26: "It's the root certificate! Yay!"
  27: "The entire certificate chain is trusted, and thus the site certificate is trusted as well."
  28: "In the event that the last certificate is not a root certificate, and there are no more certificates to download, the chain is untrusted."
  29: "But why use a certificate authority when you can self-sign your certificates?"
  30: "A self-signed certificate provides the same level of encryption as one generated by an authority."
  31: "No crabs can spy on your data."
  32: "And there is no charge to self-sign your certificates!"
  33: "Yes, but almost every browser checks that the certificate is issued by a trusted authority."
  34: "As such visitors are warned that the certificate cannot be trusted."
  35: "Self-signed certificates can be useful for testing, and intranets, but you should avoid using them on public sites."
  36: "Self-signed certificates can be forged. Basically, they say 'Trust me, it's me, I promise!'."
  37: "A trusted certificate says: 'Trust me, an authority verified me'."
  38: "Bicara tentang percaya. Terima kasih kamu sudah mempercayai kami melalui cerita ini."
  39: "Sayangnya, ini akan segera berakhir."
  40: "Kami harap kamu menikmati komik ini!"
  41: "Sampai jumpa lagi!"
  end-title: "Hai, kamu berhasil melakukannya!"
  end-p1: "Kamu menyelesaikan komiknya! Terima kasih dari tapak kucing kami yang paling dalam karena telah menghabiskan beberapa bagian dari harimu membaca tentang HTTPS."
  end-p2: "Kami mengajukan tiga aktivitas untuk mengahlihkan kamu dari fakta bahwa tidak ada episode lain untuk dibaca."
  option-1: "Ambil kuis"
  option-1-p: "Untuk membuatmu lebih yakin, kamu bisa tes pengetahuan barumu tentang HTTPS dalam sebuah kuis. Ya, itu benar. Kami bahkan akan mengirim sebuah sertifikat penyelesaian jika kamu mencetak nilai yang cukup tinggi."
  option-2: "Sampaikan pada jaringan sosial"
  option-2-p: "Hal normal untuk dilakukan. Jika kamu ingin memberikan tekanan lebih pada kami untuk agar membuat lebih banyak komik, ini adalah beberapa contoh agar kami tetap berada pada tepi kursi kami."
  option-3: "Kunjungi DNSimple"
  option-3-p: "Jika kamu menikmati komiknya, dan butuh sebuah Sertifikat SSL untuk mengamankan website kamu, atau sebuah DNS yang kokoh dan mudah digunakan (bukan kata-kata kami), atau sebuah domain baru yang menarik, silahkan kunjungi kami."
  post-data: "P.S. Jika kamu ingin menyarankan sebuah episode baru (tolong jangan, karena kami harus memperbaharui halaman ini) atau beri kami masukan tentang yang sudah ada,"
  post-data-link: "Kami semua adalah kucing pendengar"
